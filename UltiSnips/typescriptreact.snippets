# function 

# Functional component snippet with type
snippet fce "function component export (with prop interface)" b
import { type ReactElement } from "react"

export interface $1Props {
	$3
}

export function ${1:`!v expand('%:t:r')`}(${2:props}: $1Props): ReactElement {
	return ${4:<></>}$0
}
endsnippet

# Use state snippet
snippet us "Use State" b
const [$1, set`!p snip.rv=upperfirst(t[1])`] = useState$3($2)$0
endsnippet

# Use effect snippet
snippet ue "Use Effect" b
useEffect(() => {
    ${1}
}, [${2}]);
endsnippet

snippet intf "create interface for file" b
export interface ${1:`!v expand('%:t:r')`}$2 {
	$0
}
endsnippet


# log snippets
snippet cl "console.log" w
console.log($1)
endsnippet

snippet clv "console.log variable" w
console.log("$1:", ${1:})
endsnippet

snippet ce "console.error" w
console.error($1)
endsnippet

snippet cev "console.error variable" w
console.error("$1: ", ${1:})
endsnippet

snippet cw "console.warn" w
console.warn($1)
endsnippet

snippet cwv "console.warn variable" w
console.warn("$1: ", ${1:})
endsnippet

snippet ct "console.table" w
console.table($1)
endsnippet

snippet cd "console.debug" w
console.debug($1)
endsnippet

snippet cdv "console.debug variable" w
console.debug("$1: ", ${1:})
endsnippet

# env snippets
snippet dev "process.env.NODE_ENV !== 'production'" w
process.env.NODE_ENV !== "production"
endsnippet

snippet prod "process.env.NODE_ENV === 'production'" w
process.env.NODE_ENV === "production"
endsnippet


